import os
import pandas as pd
from PIL import Image
import torch
from torch.utils.data import Dataset

class XRayDataset(Dataset):
    """Custom PyTorch Dataset for X-Ray images and their reports."""
    def __init__(self, data_csv_path, vocab, transform=None):
        """
        Args:
            data_csv_path (string): Path to the csv file with image paths and captions.
            vocab (Vocabulary): Vocabulary object.
            transform (callable, optional): Optional transform to be applied on a sample.
        """
        self.data = pd.read_csv(data_csv_path)
        self.vocab = vocab
        self.transform = transform

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        if torch.is_tensor(idx):
            idx = idx.tolist()

        img_path = self.data.iloc[idx, 0]
        # Make sure the image path is correct relative to the dataset root if needed
        # This assumes the paths in the CSV are correct as generated by preprocess.py
        image = Image.open(img_path).convert("RGB")

        caption = self.data.iloc[idx, 2] # 'impression' column
        tokens = str(caption).lower().split()

        # Numericalize the caption text
        caption_vec = []
        caption_vec.append(self.vocab.stoi["<START>"])
        caption_vec.extend(self.vocab.numericalize(tokens))
        caption_vec.append(self.vocab.stoi["<END>"])

        caption_tensor = torch.LongTensor(caption_vec)

        if self.transform:
            image = self.transform(image)

        return image, caption_tensor